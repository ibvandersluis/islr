install.packages('ISLR')
library(ISLR)
install.packages('MASS')
library(MASS)
x <- x(1,3,2,5)
# Clear variables
rm(list=ls())
x <- c(1,3,2,5)
# Print x
x
# Assign values to x and y using =
x = c(1,6,2)
y = c(1,4,3)
# Get lengths of x and y
length(x)
length(y)
# Add x and y
x+y
ls()
# Clear workspace
rm(list=ls())
# Assign matrix to x
x = matrix(data=c(1,2,3,4), nrow=2, ncol=2)
# Print x
x
# Remake matrix with byrow=TRUE
matrix(c(1,2,3,4),2,2,byrow=TRUE)
# Math on matrix x (performs operation on each object)
sqrt(x)
x^2
# Assign x 50 numbers with normal distribution
x=rnorm(50)
# Assign y similar numbers but changes distribution settings
y=x+rnorm(50,mean=50,sd=.1)
# Calculatre correlation of x and y
cor(x,y)
# Set the seed to 1303
set.seed(1303)
rnorm(50)
# Set the seed to 3
set.seed(3)
y=rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
# Assign normal distributions to x and y
x=rnorm(100)
y=rnorm(100)
# Plot x and y
plot(x,y)
# Plot x and y with labels
plot(x,y,xlab="this is the x-axis",ylab="this is the y-axis",main="Plot of X vs Y")
# Save as .pdf!
# Create empty .pdf file
pdf("Figure.pdf")
# Make a plot for the .pdf
plot(x,y,col="green")
# Tell R we're done making the .pdf
dev.off()
getwd()
setwd(~/code/name_UI <- function(id) {
ns <- NS(id)
tagList(
)
}
name <- function(input, output, session) {
})
setwd(~/code/src/github/ibvandersluis/islr)
setwd(/home/isaac/code/src/github/ibvandersluis/islr)
setwd("/home/isaac/code/src/github/ibvandersluis/islr")
setwd("~/code/src/github/ibvandersluis/islr")
setwd("~/code/src/github.com/ibvandersluis/islr")
getwd()
# Make sequence 1-10 (inclusive) and assign to x
x=seq(1,10)
# Print x
x
# Alternative method
x=1:10
x
# Assign x a sequence of 50 evely spaced numbers from -pi to pi
x=seq(-pi,pi,length=50)
x
# Make a contour (topo map) plot. Arguments: vectors x and y, and a matrix for z
y=x
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour(x,y,f,nlevels=45,add=T)
fa=(f-t(f))/2
contour(x,y,fa,nlevels=15)
# Make an image (colour-coded plot)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa,theta=30)
persp(x,y,fa,theta=30,phi=20)
persp(x,y,fa,theta=30,phi=70)
persp(x,y,fa,theta=30,phi=40)
# Store data in a matrix in A
A=matrix(1:16,4,4)
# Print A
A
# Select cell from row 2, column 3
A[2,3]
# Select portions of matrix
A[c(1,3), c(2,4)]
A[1:3,2:4]
A[1:2,]
A[,1:2]
A
# Use - sign to exclude that section
# Exclude rows 1 and 3
A[-c(1,3),]
# Exclude rows 1 and 3, and cols 1, 3 and 4
A[-c(1,3),-c(1,3,4)]
# Print dimensions of A
dim(A)
# Load Auto.data into R
Auto=read.table("Auto.data")
# View data in spreadsheet like window
fix(Auto)
# Load data, correctly sorting out header ('header=T') and missing values ('na.strings="?"')
Auto=read.table("Auto.data",header=T,na.strings="?")
# Reexamine datat
fix(Auto)
# Load from CSV
Auto=read.csv("Auto.csv",header=T,na.strings="?")
# Load from CSV
Auto=read.csv("Auto.csv",header=T,na.strings="?")
fix(Auto)
dim(Auto)
Auto[1:4,]
# Omit rows with absent values
Auto=na.omit(Auto)
dim(Auto)
# View variable names
names(Auto)
# Tell R to plot cylinders, mpg (will produce error)
plot(cylinders, mpg)
# Till R which data set to look in for the variable name
plot(Auto$cylinders, Auto$mpg)
# Alternatively, attach R to the dataset
attach(Auto)
plot(cylinders, mpg)
# Convert cylinders from quantitative to qualitative
cylinders=as.factor(cylinders)
plot(cylinders, mpg)
plot(cylinders, mpg, col="red")
plot(cylinders, mpg, col="red", varwidth=T)
plot(cylinders, mpg, col="red", varwidth=T)
plot(cylinders, mpg, col="red", varwidth=T, horizontal=T)
plot(cylinders, mpg, col="red", varwidth=T, xlab="cylinders", ylab="MPG")
# Plot a histogram
hist(mpg)
hist(mpg,col=2)
hist(mpg,col=2,breaks=15)
# Create a scatterplot matrix with pairs()
pairs(Auto)
pairs(~ mpg + displacement + horsepower + weight + acceleration, Auto)
# identify() allows us to interact with a plot to get values on specific data points
# 3 args: x-axis, y-axis, the variable to be examined
plot(horsepower,mpg)
identify(horsepower,mpg,name)
summary(Auto)
# Or just one variables
summary(mpg)
# Save commands from session
savehistory()
# Quit
q()
