which.min(reg.summary$bic)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type="l")
points(6,reg.summary$bic[6],col="red",cex=2,pch=20)
# regsubsets() has built-in plot() command which can display selected variables for the best model
plot(regfit.full,scale="r2")
# regsubsets() has built-in plot() command which can display selected variables for the best model
plot(regfit.full,scale="r2")
?plot.regsubsets
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
# regsubsets() has built-in plot() command which can display selected variables for the best model
plot(regfit.full, scale="r2")
# regsubsets() has built-in plot() command which can display selected variables for the best model
plot(regfit.full, scale = "r2")
# regsubsets() has built-in plot() command which can display selected variables for the best model
plot(regfit.full,scale="r2")
par("mar")
par(mar=c(1,1,1,1))
par("mar")
# regsubsets() has built-in plot() command which can display selected variables for the best model
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
# regsubsets() has built-in plot() command which can display selected variables for the best model
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
# regsubsets() has built-in plot() command which can display selected variables for the best model
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
# regsubsets() has built-in plot() command which can display selected variables for the best model
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
par(mfrow=c(1,1))
par(mfrow=c(1,1))
# regsubsets() has built-in plot() command which can display selected variables for the best model
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
# Use coef() to see coefficient estimates
coef(regfit.full,6)
# regsubsets() can be used to perform forward/backward stepwise selection
# Use method option to specify "forward" or "backward"
regfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19,method="forward")
summary(regfit.fwd)
regfit.bwd=regsubsets(Salary~.,data=Hiters,nvmax=19,method="backward")
regfit.bwd=regsubsets(Salary~.,data=Hitters,nvmax=19,method="backward")
summary(regfit.bwd)
# Seven-variable models identified by each method are all different
coef(regfit.full,7)
coef(regfit.fwd,7)
coef(regfit.bwd,7)
set.seed(1)
train=sample(c(TRUE,FALSE),nrow(Hitters),rep=TRUE)
test=(!train)
regfit.best=regsubsets(Salary~.,data=Hitters[train,],nvmax=19)
# Compute validation set error for best model of each size
# Make a model matrix from test data
test.mat=model.matrix(Salary~.,data=Hitters[test,])
# For each size i, extract coefficients from regfit.best,
# multiply them into columns of test model matrix,
# and compute test MSE
val.errors=rep(NA,19)
# For each size i,
for(i in 1:19){
# extract coefficients from regfit.best,
coefi=coef(regfit.best,id=i)
# multiply them into columns of test model matrix,
pred=test.mat[,names(coefi)]%*%coefi
# and compute test MSE
val.errors[i]=mean((Hitters$Salary[test]-pred)^2)
}
# The best model is the one with 10 variables
val.errors
which.min(val.errors)
# Create random vector train where value is TRUE if the observation is in the training set, else FALSE
set.seed(1)
train=sample(c(TRUE,FALSE),nrow(Hitters),rep=TRUE)
test=(!train)
# Apply regsubsets() to training set to perform best subset selection
regfit.best=regsubsets(Salary~.,data=Hitters[train,],nvmax=19)
# Compute validation set error for best model of each size
# Make a model matrix from test data
test.mat=model.matrix(Salary~.,data=Hitters[test,])
val.errors=rep(NA,19)
# For each size i,
for(i in 1:19){
# extract coefficients from regfit.best,
coefi=coef(regfit.best,id=i)
# multiply them into columns of test model matrix,
pred=test.mat[,names(coefi)]%*%coefi
# and compute test MSE
val.errors[i]=mean((Hitters$Salary[test]-pred)^2)
}
# The best model is the one with 10 variables
val.errors
which.min(val.errors)
# This shows 7 to be the optimal number of variables
coef(regfit.best,7)
# Make a predict function for regsubsets
predict.regsubsets=function(object,newdata,id,...){
form=as.formula(object$call[[2]])
mat=model.matrix(form,newdata)
coefi=coef(object,id=id)
xvars=names(coefi)
mat[,xvars]%*%coefi
}
regfit.best=regsubsets(Salary~.,data=Hitters,nvmax=19)
coef(regfit.best,7)
# Use cross-validation
# We must perform best subset selection within each of the k training sets
# Create a vector that allocates each observation to one of k=7 folds
k=10
set.seed(1)
folds=sample(1:k,nrow(Hitters,replace=TRUE))
# Use cross-validation
# We must perform best subset selection within each of the k training sets
# Create a vector that allocates each observation to one of k=7 folds
k=7
set.seed(1)
folds=sample(1:k,nrow(Hitters,replace=TRUE))
folds=sample(1:k,nrow(Hitters),replace=TRUE)
# Use cross-validation
# We must perform best subset selection within each of the k training sets
# Create a vector that allocates each observation to one of k=7 folds
k=7
set.seed(1)
folds=sample(1:k,nrow(Hitters),replace=TRUE)
# Create a matrix to store results
cv.errors=matrix(NA,k,19,dimnames=list(NULL,paste(1:19)))
# Write a for loop that performs cross validation
# For jth fold, elements of folds = j are in test set, remainder are in training set
# Make predictions for each model size
# Compute test errors on appropriate subset and store in cv.errors
for(j in 1:k){
best.fit=regsubsets(Salary~.,data=Hitters[folds!=j,],nvmax=19)
for(i in 1:19){
pred=predict(best.fit,Hitters[folds==j,],id=i)
cv.errors[j,i]=mean((Hitters$Salary[folds==j]-pred)^2)
}
}
# Use apply() to average over the columns of this matrix to get vector
# for which the jth element is the cross-validation error for the j-variable model
mean.cv.errors=apply(cv.errors,2,mean)
mean.cv.errors
par(mfrow=c(1,1))
plot(mean.cv.errors,type="b")
# Perform best subset selection on full dataset to get 11-variable model
reg.best=regsubsets(Salary~.,data=Hitters,nvmax=19)
# Perform best subset selection on full dataset to get 11-variable model
reg.best=regsubsets(Salary~.,data=Hitters,nvmax=19)
# Perform best subset selection on full dataset to get 11-variable model
reg.best=regsubsets(Salary~.,data=Hitters,nvmax=19)
coef(reg.best,11)
# Syntax: pass in an x matrix and y vector
# y~x syntax not used
x=model.matrix(Salary~.,Hitters)[,-1]
y=Hitters$Salary
# If not installed, install.packages('glmnet')
# If not installed, install.packages('glmnet')
install.packages('glmnet')
# If not installed, install.packages('glmnet')
library(glmnet)
grid=10^seq(10,-2,length=100)
# glmnet()'s alpha option determines model type. 0 for ridge regression, 1 for lasso
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
# Each value of lambda is a vector of ridge regression coefficients
# Stored in a matrix accessible using coef()
dim(coef(ridge.mod))
ridge.mod$lambda[50]
coef(ridge.mod)[,50]
sqrt(sum(coef(ridge.mod)[-1,50]^2))
# Coefficients when lambda = 705
ridge.mod$lambda[60]
coef(ridge.mod)[,60]
sqrt(sum(coef(ridge.mod)[-1,60]^2))
# Use predict() to get ridge regression coefficients for new value of lambda, in this case 50
predict(ridge.mod,s=50,type="coefficients")[1:20,]
# Need to split samples into training/test sets
# Two ways to randomly split the data:
# 1) Produce random vector of TRUE and FALSE elements
# 2) Randomly choose a subset of numbers between 1 and n
# We use the second approach here
set.seed(1)
train=sample(1:nrow(x),nrow(x)/2)
test=(-train)
y.test=y[test]
# Fit ridge regression on training set and evaluate MSE on test set, using lambda = 4
# In this function call, newx replaces type="coefficients" to get predictions for test set
ridge.mod=glmnet(x[train,],y[train],alpha=0,lambda=grid,thresh=1e-12)
ridge.pred=predict(ridge.mod,s=4,newx=x[test,])
mean((ridge.pred-y.test)^2)
# If we had fit a model with an intercept,
# we could predict each test observation using the mean of training observations
mean((mean(y[train])-y.test)^2)
# Could get the same result fitting a ridge regression model with very large lambda
ridge.pred=predict(ridge.mod,s=1e10,newx=x[test,])
mean((ridge.pred-y.test)^2)
# Check whether ridge regression with lambda = 4 is any better than least squares regression
# (least squares is just ridge regression with lambda = 0)
ridge.pred=predict(ridge.mod,s=0,newx=x[test,],exact=T)
# Check whether ridge regression with lambda = 4 is any better than least squares regression
# (least squares is just ridge regression with lambda = 0)
ridge.pred=predict(ridge.mod,s=0,newx=x[test,],x=x,y=y,exact=T)
mean((ridge.pred-y.test)^2)
# I got 94050, book got 114783
lm(y~x,subset=train)
predict(ridge.mod,s=0,exact=T,type="coefficients")[1:20,]
predict(ridge.mod,s=0,x=x,y=y,exact=T,type="coefficients")[1:20,]
# In general we should use cross-validation to choose the tuning parameter lambda
# Do this using cv.glmnet(), which performs ten-fold cross validation by default
set.seed(1)
cv.out=cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam=cv.out$lambda.min
bestlam
# Get MSE associated with this value
ridge.pred=predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
# Fit ridge regression model on full dataset and examine coefficient estimates
out=glmnet(x,y,alpha=0)
predict(out,type="coefficients",s=bestlam)[1:20,]
# To fit lasso model, use glmnet() with alpha=1
lasso.mod=glmnet(x[train,],y[train],alpha=1,lambda=grid)
plot(lasso.mod)
set.seed(1)
cv.out=cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam=cv.out$lambda.min
lasso.pred=predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2)
# Advantage: resulting coefficients are sparse
out.glmnet(x,y,alpha=1,lambda=grid)
# Advantage: resulting coefficients are sparse
out=glmnet(x,y,alpha=1,lambda=grid)
lasso.coef=predict(out,type="coefficients",s=bestlam)[1:20,]
lasso.coef
lasso.coef[lasso.coef!=0]
install.libraries('pls')
install.packages('pls')
# If not installed, install.packages('pls')
library(pls)
set.seed(2)
pcr.fit=pcr(Salary~.,data=Hitters,scale=TRUE,validation="CV")
# scale=TRUE standardises the predictors
# validation="CV" causes pcr() to compute ten-fold cross-validation error for each possible M (num components)
# Examine resulting fit
summary(pcr.fit)
# Plot cross-validation scores using validationplot()
# val.type="MSEP" causes cross-validation MSE to be plotted
validationplot(pcr.fit,val.type="MSEP")
# Perform PCR on training data and evaluate test set performance
set.seed(1)
pcr.fit=pcr(Salary~.,data=Hitters,subset=train,scale=TRUE,validation="CV")
validationplot(pcr.fit,val.type="MSEP")
pcr.pred=predict(pcr.fit,x[test,],ncomp=5)
mean((pcr.pred-y.test)^2)
pcr.pred=predict(pcr.fit,x[test,],ncomp=7)
mean((pcr.pred-y.test)^2)
# Fit PCR on full dataset, using M=5 (or M=7...)
pcr.fit=pcr(y~x,scale=TRUE,ncomp=5)
summary(pcr.fit)
# Fit PCR on full dataset, using M=5 (or M=7...)
pcr.fit=pcr(y~x,scale=TRUE,ncomp=7)
summary(pcr.fit)
# Syntax for PLS is just like the syntax for PCR
set.seed(1)
pls.fit(plsr(Salary~.,data=Hitters,subset=train,scale=TRUE,validation="CV"))
pls.fit=plsr(Salary~.,data=Hitters,subset=train,scale=TRUE,validation="CV")
summary(pls.fit)
# My results differ
validationplot(pls.fit,val.type="MSEP")
# Also different, I get minimum at M=1, not M=2
pls.pred=predict(pls.fit,x[test,],ncomp=2)
mean((pls.pred-y.test)^2)
# Perform PLS using full data set and M=1 (or M=2??)
pls.fit=plsr(Salary~.,data=Hitters,scale=TRUE,ncomp=2)
summary(pls.fit)
# Perform PLS using full data set and M=1 (or M=2??)
pls.fit=plsr(Salary~.,data=Hitters,scale=TRUE,ncomp=1)
summary(pls.fit)
# Save history
savehistory()
# Quit
q()
# Clear workspace
rm(list=ls())
library(ISLR)
attach(Wage)
# Fit the model
fit=lm(wage~poly(age,4),data=Wage)
coef(summary(fit))
# We can use poly() to get age, age^2, age^3, age^4 directly with raw=TRUE
# This option affects the coefficients but not the fitted values
fit2=lm(wage~poly(age,4,raw=T),data=Wage)
coef(summary(fit2))
# Which is equivalent to this:
fit2a=lm(wage~age+I(age^2)+I(age^3)+I(age^4))
coef(fit2a)
# Or this:
fit2b=lm(wage~cbind(age,age^2,age^3,age^4),data=Wage)
coef(fit2b)
# Create grid of values for age
agelims=range(age)
age.grid=seq(from=agelims[1],to=agelims[2])
# Call predict() specifying that we want standard errors with se=TRUE
preds=predict(fit,newdata=list(age=age.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
# Plot data and add the fit from deg-4 polynomial
par(mfrow=c(1,2),mar=c(4.5,4.5,1,1),oma=c(0,0,4,0))
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Degree-4 Polynomial",outer=T)
lines(age.grid,preds$fit,lwd=2,col="blue")
matlines(age.grid,se.bands,lwd=1,col="blue",lty=3)
# Fitted values are the same regardless of whether poly() produces orthogonal basis functions
preds2=predict(fit2,newdata=list(age=age.grid),se=TRUE)
max(abs(pred$fit~preds2$fit))
max(abs(pred$fit-preds2$fit))
max(abs(preds$fit-preds2$fit))
# Fitted values are the same regardless of whether poly() produces orthogonal basis functions
preds2=predict(fit2,newdata=list(age=age.grid),se=TRUE)
max(abs(preds$fit-preds2$fit))
# Create grid of values for age
agelims=range(age)
age.grid=seq(from=agelims[1],to=agelims[2])
# Call predict() specifying that we want standard errors with se=TRUE
preds=predict(fit,newdata=list(age=age.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
# Plot data and add the fit from deg-4 polynomial
# Divide plot area into 2 tall subplots. mar and oma allow us to control the margins
par(mfrow=c(1,2),mar=c(4.5,4.5,1,1),oma=c(0,0,4,0))
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
# Title spans both subplots
title("Degree-4 Polynomial",outer=T)
lines(age.grid,preds$fit,lwd=2,col="blue")
matlines(age.grid,se.bands,lwd=1,col="blue",lty=3)
# Fitted values are the same regardless of whether poly() produces orthogonal basis functions
preds2=predict(fit2,newdata=list(age=age.grid),se=TRUE)
max(abs(preds$fit-preds2$fit))
# Must decide which degree of polynomial to use
# Use the analysis of variance anova() function to test H-null that M-1 sufficiently explains the data
# H-alt is that a more complex model M-2 is required
# M-1 and M-2 must be nested models (M-1's predictors must be a subset of M-2)
# Fit 5 models and sequentially compare the simpler model
fit.1=lm(wage~age,data=Wage)
fit.2=lm(wage~poly(age,2),data=Wage)
fit.2=lm(wage~poly(age,3),data=Wage)
fit.2=lm(wage~poly(age,4),data=Wage)
fit.2=lm(wage~poly(age,5),data=Wage)
# Must decide which degree of polynomial to use
# Use the analysis of variance anova() function to test H-null that M-1 sufficiently explains the data
# H-alt is that a more complex model M-2 is required
# M-1 and M-2 must be nested models (M-1's predictors must be a subset of M-2)
# Fit 5 models and sequentially compare the simpler model
fit.1=lm(wage~age,data=Wage)
fit.2=lm(wage~poly(age,2),data=Wage)
fit.3=lm(wage~poly(age,3),data=Wage)
fit.4=lm(wage~poly(age,4),data=Wage)
fit.5=lm(wage~poly(age,5),data=Wage)
anova(fit.1,fit.2,fit.3,fit.4,fit.5)
# Could have also used the orthogonal polynomials resulting from poly() to get p-values
coef(summary(fit.5))
# The square of the t-statistics are equal to the F-statistics from anova()
(-11.983)^2
olynomials
# Also works with other terms in the model
# We can compare these three models with anova()
# ANOVA works whether or not we use orthogonal polynomials
# ANOVA works whether or not we use orthogonal polynomials
# Also works with other terms in the model
# ANOVA works whether or not we use orthogonal polynomials
# Also works with other terms in the model
# We can compare these three models with anova()
# ANOVA works whether or not we use orthogonal polynomials
# Also works with other terms in the model
# We can compare these three models with anova()
fit.1=lm(wage~education+age,data=Wage)
fit.2=lm(wage~education+poly(age,2),data=Wage)
fit.3=lm(wage~education+poly(age,3),data=Wage)
anova(fit.1,fit.2,fit.3)
# Let's predict whether someone earns more that $250k per year
# Similar to before, except we first make an appropriate response vector
# And apply glm() using family="binomial" to fit a polynomial logistic regression
fit=glm(I(wage>250)~poly(age,4),data=Wage,family=binomial)
# wage>250 evaluates to a boolean TRUE or FALSE, while glm() turns it into binary (T=1, F=0)
# Make predictions
preds=predict(fit,newdata=list(age=age.grid),se=T)
# See the book for the very mathy equation for this command:
pfit=exp(preds$fit)/(1+exp(preds$fit))
se.bands.logit=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
se.bands=exp(se.bands.logit)/(1+exp(se.bands.logit))
# Note: could have directly computed probabilities by selecting type="response" in predict()
preds=predict(fit,newdata=list(age=age.grid),type="response",se=T)
plot(age,I(wage>250),xlim=agelims,type="n",ylim=c(0,.2))
points(jitter(age),I((wage>250)/5),cex=.5,pch="|",col="darkgrey")
lines(age.grid,pfit,lwd=2,col="blue")
matlines(age.grid,se.bands,lwd=1,col="blue",lty=3)
# Fit a step function with cut()
table(cut(age,4))
fit=lm(wage~cut(age,4),data=Wage)
coef(summary(fit))
install.packages('splines')
install.packages('splines')
library(splines)
# Fit wage to age:
fit=lm(wage~bs(age,knots=c(25,40,60),data=Wage))
# Fit wage to age:
fit=lm(wage~bs(age,knots=c(25,40,60)),data=Wage)
pred=predict(fit,newdata=list(age=age.grid),se=T)
plot(age,wage,col="gray")
lines(age.grid,pred$fit,lwd=2)
lines(age.grid,pred$fit+2*pred$se,lty="dashed")
lines(age.grit,pred$fit-2*pred$se,lty="dashed")
lines(age.grid,pred$fit-2*pred$se,lty="dashed")
# Use df option to produce a spline with knots at uniform quantiles
dim(bs(age,knots=c(25,40,60)))
dim(bs(age,df=6))
attr(bs(age,df=6),"knots")
# Use ns() to fit a natural spline
fit2=lm(wage~ns(age,df=4),data=Wage)
pred2=predict(fit2,newdata=list(age=age.grid),se=T)
lines(age.grid,pred2$fit,col="red",lwd=2)
# Fit a smoothing spline
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Smoothing Spline")
fit=smooth.spline(age,wage,df=16)
fit2=smooth.spline(age,wage,cv=TRUE)
fit2$df
lines(fit,col="red",lwd=2)
lines(fit2,col="blue",lwd=2)
legend("topright",legend=c("16 DF","6.8 DF"),col=c("red","blue"),lty=1,lwd=2,cex=.8)
# Perform local regression with loess() function
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Local Regression")
fit=loess(wage~age,span=.2,data=Wage)
fit2=loess(wage~age,span=.5,data=Wage)
lines(age.grid,predct(fit,data.frame(age=age.grid)),col="red",lwd=2)
lines(age.grid,predict(fit,data.frame(age=age.grid)),col="red",lwd=2)
lines(age.grid,predict(fit2,data.frame(age=age.grid)),col="blue",lwd=2)
legend("topright",legend=c("Span=0.2","Span=0.5"),col=c("red","blue"),lty=1,lwd=2,cex=.8)
education as a qualitative predictor
# gam1=lm(wage~ns(year,4)+ns(age,5)+education,data=Wage
# Fit GAM to predict wage using year and age, treating education as a qualitative predictor
gam1=lm(wage~ns(year,4)+ns(age,5)+education,data=Wage)
install.packages('gam')
# Fit model using smoothing splines instead of natural splines
# Need gam library. If not installed, install.packages('gam')
library(gam)
# s() indicates we want a smoothing spline
# We specify 4 deg of freedom for year and 5 for age
# Qualitative variables can be left as they are, as it will be converted into dummy variables
# Use gam() to fit the function
gam.m3=gam(wage~s(year,4)+s(age,5)+education,data=Wage)
# Plot the figure
par(mfrow=c(1,3))
plot(gam.m3,se=TRUE,col="blue")
# We can still use plot.gam() on gam1 even though it is an lm
plot.gam(gam1,se=TRUE,col="red")
# We can still use plot.gam() on gam1 even though it is an lm
plot.gam(gam1,se=TRUE,col="red")
# We can still use plot.gam() on gam1 even though it is an lm
plot.gam(gam1,se=TRUE,col="red")
# We can still use plot.gam() on gam1 even though it is an lm
plot.Gam(gam1,se=TRUE,col="red")
# We can use ANOVA tests to determine which model is best
# M-1: a GAM that excludes year
# M-2: a GAM that uses a linear function of year
# M-3: a GAM that uses a spline function of year
gam.m1=gam(wage~s(age,5)+education,data=Wage)
gam.m2=gam(wage~year+s(age,5)+education,data=Wage)
anova(gam.m1,gam.m2,gam.m3,test="F")
summary(gam.m3)
# Make predictions
preds=predict(gam.m2,newdata=Wage)
# We can use local regression as building blocks in a GAM with lo()
gam.lo=gam(wage~s(year,df=4)+lo(age,span=0.7)+education,data=Wage)
plot.Gam(gam.lo,se=TRUE,col="green")
# We can also use lo() to create interactions before calling the gam() function
gam.lo.i=gam(wage~lo(year,age,span=0.5)+education,data=Wage)
# We can also use lo() to create interactions before calling the gam() function
gam.lo.i=gam(wage~lo(year,age,span=0.5)+education,data=Wage)
# We can also use lo() to create interactions before calling the gam() function
gam.lo.i=gam(wage~lo(year,age,span=0.5)+education,data=Wage)
# To plot resulting 2D surface, install akima
install.packages('akima')
library(akima)
plot(gam.lo.i)
# To fit logistic regression GAM, use I() to make binary response variable with family=binomial
gam.lr=gam(I(wage>250)~year+s(age,df=5)+education,family=binomial,data=Wage)
par(mfrow=c(1,3))
plot(gam.lr,se=T,col="green")
# There are no high earners in the <HS category
table(education,I(wage>250))
# So we can remove this category from the GAM
gam.lr.s=gam(I(wage>250)∼year+s(age,df=5)+education,family=binomial,data=Wage,subset=(education!="1. < HS Grad"))
# So we can remove this category from the GAM
gam.lr.s=gam(I(wage>250)~year+s(age,df=5)+education,family=binomial,data=Wage,subset=(education!="1. < HS Grad"))
plot(gam.lr.s,se=T,col="green")
# Save history
savehistory()
# Quit
quit()
# Quit
q()
